단위 테스트 단위의 크기가 작을수록 단위의 복잡성이 낮아진다.  
따라서, 단위 테스트를 활용하여 동작을 표현하기 더 쉬워진다. 
즉, 테스트 대상 단위의 크기를 작게 설정해서 단위 테스트를 최대한 간단하고 디버깅하기 쉽게 작성해야 한다.
개발자 관점에서 테스트를 하기 때문에 단위 테스트는 소프트웨어 내부 코드에 관련한 지식을 반드시 알고 있어야 하는 화이트박스 테스트를 알고 있어야 한다.
단위 테스트는 TDD와 함께 할 때 특히 더 강력해진다. 
TDD(Test-Driven Development,TDD)란 테스트 주도 개발이다. 
반복 테스트를 이용한 소프트웨어 방법론으로 작은 단위의 테스트 케이스를 작성하고 이를통과하는 코드를 추가하는 단계를 반복하여 구현한다. 
짧은 개발 주기의 반복에 의존하는 개발 프로세스이며, 애자일 방법론 중 하나인 eXtream Programming(XP)의 'Test-First' 개념에 기반을 둔 단순한 설계를 중요시한다.

먼저 단위테스트를 해보겠다. 모듈에 대한 테스트를 의미한다. 
코드가 효율적으로 작성되었는지, 프로젝트 내에 합의된 코딩 표준을 준수하고 있는지도 검증한다.

l  클래스에 있는 입력 변수의 개수가 정확한지 확인한다.
l  입력 변수의 타입이 정확한지 확인한다.
l  변수 이름이 부정확하게 타이핑되었거나 컴파일러에 의해 잘리지 않는지 확인한다. 
l  변수의 스코프를 확인하여 참조가 잘 되어있는지 확인한다. 
l  함수를 호출할 때 인자개수가 정확한지 확인한다. 
l  테스팅을 하면서 예를 들어 개발하면서 stage 3를 테스트 할 때, 항상 stage 1, stage 2를 클리어한 뒤 테스트를 해야한다.
   테스트 비용이 증가한다. 이럴 때에 어떻게 하면 비용을 낮출 수 있을까를 고민한다. (TDD)
